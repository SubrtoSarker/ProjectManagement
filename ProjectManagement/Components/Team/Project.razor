@page "/Project"
@attribute [TabItemOption(Text = "Project")]
@using Models.User;
@using ProjectManagement.Models.ProjectModel
@using ProjectManagement.Services.Project
@using Services;
@using Services.Encription;
@using Services.Auth;
@using Services.Session
@using Microsoft.JSInterop;
@using System.Text.Json;
@using NetcodeHub.Packages.Components.Validations.OnInput;
@inject IAuthServices AuthServices;
@inject IEncription enc;
@inject IJSRuntime JSRuntime
@inject NavigationManager nav
@inject Blazored.SessionStorage.ISessionStorageService sess
@inject IProjectService project
@inject ToastService Tost

<PageTitle>Project</PageTitle>
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-12">
            <h4>
                Projects List 
                <button class="btn btn-primary"
                        data-bs-toggle="modal"
                        data-bs-target="#AddTask">
                    <i class="bi bi-plus"></i>
                </button>
            </h4>
            
            @if (proj == null)
            {
                <p>Loading...</p>
            }
            else
            {
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Project Name</th>
                            <th>Agging</th>
                            <th>Complete</th>
                            <th>Users</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var project in proj)
                        {
                            <tr>
                                <td>@project.StrProjectName</td>
                                <td>@project.DaysPassed</td>
                                <td>
                                    @if (!project.IsCompleate)
                                    {
                                        <button class="btn btn-primary btn-sm rounded" @onclick="() => UpdateProject(project.IntProjectID)">Complete</button>
                                    }
                                    else
                                    {
                                        <InputCheckbox disabled="True" @bind-Value="project.IsCompleate" />
                                    }
                                </td>
                                <td>
                                    @project.UserCount
                                    @if (!project.IsCompleate)
                                    {
                                        <button class="btn btn-success rounded ms-2"
                                        @onclick="() => GetUser(project.IntProjectID)"
                                        data-bs-toggle="modal"
                                        data-bs-target="#Assign">
                                            <i class="bi bi-plus"></i>
                                        </button>
                                    }
                                </td>
                                <td>
                                    <button class="btn btn-danger rounded" @onclick="() => DeleteProject(project.IntProjectID)">Remove</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>
<div class="modal fade fade-in-modal" id="AddTask" tabindex="-1" role="dialog" aria-labelledby="actionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title text-center">Add New Project</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="@newProject" OnValidSubmit="CreateProject" class="needs-validation" novalidate>
                    <DataAnnotationsValidator />
                    <div class="row">
                        <FloatingText id="UserName" type="text" class="form-control" @bind-Value="newProject.Name" Label="Name" />
                        <ValidationMessage class="text-danger" For="@(() => newProject.Name)" />
                    </div>
                    <button type="submit" data-bs-dismiss="modal" class="btn btn-primary">ADD</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>
<div class="modal fade fade-in-modal" id="Assign" tabindex="-1" role="dialog" aria-labelledby="actionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title text-center">Assign User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row ms-2">
                    <div class="col-md-10">
                        <label class="form-label ms-2">Name</label>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Status</label>
                    </div>
                </div>
                @foreach (var item in UserPerProject)
                {
                    <div class="row ms-2 mt-2">
                        <div class="col-md-10">
                            <label class="form-control" for="@item.intUserID">@item.strUserName</label>
                        </div>
                        <div class="col-md-2">
                            @if (item.isActive)
                            {
                                <input type="checkbox" class="form-check" id="@item.intUserID" @bind-value="item.isActive" checked="checked">
                            }
                            else
                            {
                                <input type="checkbox" class="form-check" id="@item.intUserID" @bind-value="item.isActive">
                            }
                        </div>
                    </div>
                }
                <button type="submit" data-bs-dismiss="modal" class="btn btn-primary mt-2" @onclick="Assign">Submit</button>
            </div>
        </div>
    </div>
</div>


@code {
    private ProjectCreate newProject = new ProjectCreate();
    private List<Projects> proj = new List<Projects>();
    public SessionServices session = new SessionServices();
    public List<UserPerProject> UserPerProject = new List<UserPerProject>();
    private async Task CreateProject()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to create a new project?");

        if (confirmed)
        {
            string output = await project.Create(newProject.Name.ToString(), session.UserID);
            //await JSRuntime.InvokeVoidAsync("showToast", output);
            proj = await project.GetProjectByTeam(session.TeamID, session.UserID);
            //newProject = null;
            if (output.Contains("Success"))
            {
                await Tost.Success("Success", output, true);
            }
            else
            {
                await Tost.Error("Error", output, true);
            }
            StateHasChanged();
        }
    }
    private async Task UpdateProject(int Project)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to complete this project?");
        if (confirmed)
        {
            string output = await project.UdateStatus(1, Project, session.UserID);
            //await JSRuntime.InvokeAsync<bool>("alert", output);
            proj = await project.GetProjectByTeam(session.TeamID, session.UserID);
            if (output.Contains("Success"))
            {
                await Tost.Success("Success", output, true);
            }
            else
            {
                await Tost.Error("Error", output, true);
            }
            StateHasChanged();
        }
    }

    private async Task DeleteProject(int Project)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "This Project will be removed, are you still want to proceed");
        if (confirmed)
        {
            string output = await project.UdateStatus(0, Project, session.UserID);
            //await JSRuntime.InvokeAsync<bool>("alert", output);
            proj = await project.GetProjectByTeam(session.TeamID, session.UserID);
            if (output.Contains("Success"))
            {
                await Tost.Success("Success", output, true);
            }
            else
            {
                await Tost.Error("Error", output, true);
            }
            proj = await project.GetProjectByTeam(session.TeamID, session.UserID);
            StateHasChanged();
        }
    }
    private async void GetUser(int ProjectID)
    {
        UserPerProject = await project.GetUserPerProject(session.TeamID, ProjectID);
        StateHasChanged();
    }
    private async void Assign()
    {
        foreach (var i in UserPerProject)
        {
            string output = await project.AssigneUser(i.intUserID, i.intProjectID, i.isActive, session.UserID);
            if (output != "Unprocess.")
            {
                if (output.Contains("Success"))
                {
                    await Tost.Success("Success", output, true);
                }
                else
                {
                    await Tost.Error("Error", output, true);
                }
            } 
            proj = await project.GetProjectByTeam(session.TeamID, session.UserID);
            StateHasChanged();
        }
        
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            proj = await project.GetProjectByTeam(session.TeamID, session.UserID);
            StateHasChanged();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        session=await sess.GetItemAsync<SessionServices>("session");
        proj = await project.GetProjectByTeam(session.TeamID, session.UserID);
    }
}