@page "/ResetPassword"
@attribute [TabItemOption(Text = "ResetPassword")]
@layout LogInLayout
@using Models.User;
@using Services;
@using Services.Encription;
@using Services.Auth;
@using Services.Session
@using Microsoft.JSInterop;
@using System.Text.Json;
@using NetcodeHub.Packages.Components.Validations.OnInput;
@inject IAuthServices AuthServices;
@inject IEncription enc;
@inject IJSRuntime JSRuntime
@inject NavigationManager nav
@inject Blazored.SessionStorage.ISessionStorageService sess

<PageTitle>ResetPassword</PageTitle>
<section class="vh-100">
    <div class="container-fluid h-custom">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <h3 class="mt-3">Reset Password</h3>

            <div class="container mt-4">
                @if (!string.IsNullOrEmpty(Message))
                {
                    <div class="@MsgCls" role="alert">
                        @Message
                    </div>
                }
                @if (showOtpForm)
                {
                    <div class="mb-3">
                        @if (remainingTime > 0)
                        {
                            <div>Time remaining: @($"{remainingMinutes:D2}:{remainingSeconds:D2}")</div>
                        }
                        else
                        {
                            <div class="text-danger">OTP expired. Please request a new one.</div>
                        }
                    </div>
                    <EditForm Model="@Pass" OnValidSubmit="ResetPass">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <FloatingText id="Otp" class="form-control" @bind-Value="Pass.OTP" Placeholder="1234" Label="Enter OTP" />
                            <ValidationMessage class="text-danger" For="@(() => Pass.OTP)" />
                        </div>

                        <div class="mb-3">
                            <FloatingText id="Password" type="password" class="form-control" @bind-Value="Pass.Password" Placeholder="Password" Label="Password" />
                            <ValidationMessage class="text-danger" For="@(() => Pass.Password)" />
                        </div>

                        <div class="mb-3">
                            <FloatingText id="ConfirmPassword" type="password" class="form-control" @bind-Value="Pass.ConfirmPassword" Placeholder="Repeat your password" Label="Repeat your password" />
                            <ValidationMessage class="text-danger" For="@(() => Pass.ConfirmPassword)" />
                        </div>
                        <button type="submit" class="btn btn-primary" disabled="@isSubmitDisabled">Reset Password</button>
                    </EditForm>
                }
                else
                {
                    <EditForm Model="@Email" OnValidSubmit="SendOTP">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label for="Email" class="form-label">Your Email</label>
                            <Text id="Email" Type="email" class="form-control" @bind-Value="Email.Email" />
                            <ValidationMessage class="text-danger" For="@(() => Email.Email)" />
                        </div>
                        <button class="btn btn-success mt-3" type="submit">Send OTP</button>
                    </EditForm>
                }
            </div>
        </div>
    </div>
</section>

@code {
    private PassWordValidation Pass = new PassWordValidation();
    private EmailValidation Email = new EmailValidation();
    private bool showOtpForm = false;
    private User user = new User();
    private string Message;
    private string MsgCls;
    private System.Timers.Timer countdownTimer;
    private int remainingTime;
    private int remainingMinutes => remainingTime / 60;
    private int remainingSeconds => remainingTime % 60;
    private bool isSubmitDisabled => remainingTime <= 0;

    private async Task SendOTP()
    {
        user = await AuthServices.LogIn(Email.Email, "a", 1, "a");
        if (user is null)
        {
            ShowMessage("Sorry, there was an error!", "alert alert-danger");
        }
        else if (user.Response.Contains("Otp send to"))
        {
            ShowMessage(user.Response, "alert alert-success");
            showOtpForm = true;
            StartCountdown();
        }
        else
        {
            ShowMessage(user.Response, "alert alert-danger");
        }
    }

    private async Task ResetPass()
    {
        string newPassword = Pass.Password;
        string confirmPassword = Pass.ConfirmPassword;

        var passwordValidationMessage = ValidatePassword(newPassword, confirmPassword);
        if (!string.IsNullOrEmpty(passwordValidationMessage))
        {
            ShowMessage(passwordValidationMessage, "alert alert-info");
            return;
        }

        if (string.IsNullOrEmpty(Pass.OTP))
        {
            ShowMessage("Invalid OTP", "alert alert-danger");
            return;
        }

        user = await AuthServices.LogIn(Email.Email, confirmPassword, 2, Pass.OTP);
        if (user is null)
        {
            ShowMessage("Sorry there was an error !!!", "alert alert-danger");
        }
        else if (user.Response.Contains("Successfully"))
        {
            ClearForm();
            ShowMessage(user.Response, "alert alert-success");
            nav.NavigateTo("/");
        }
        else
        {
            ShowMessage(user.Response, "alert alert-info");
        }
    }

    private void ShowMessage(string message, string cssClass)
    {
        Message = message;
        MsgCls = cssClass;
        StateHasChanged();
    }

    private void ClearForm()
    {
        Pass = new PassWordValidation();
        Email.Email = string.Empty;
        showOtpForm = false;
    }

    private string ValidatePassword(string newPassword, string confirmPassword)
    {
        if (newPassword.Length < 6)
        {
            return "Password must be at least 6 characters long.";
        }
        if (!newPassword.Any(char.IsUpper))
        {
            return "Password must contain at least one uppercase letter.";
        }
        if (!newPassword.Any(char.IsLower))
        {
            return "Password must contain at least one lowercase letter.";
        }
        if (!newPassword.Any(char.IsDigit))
        {
            return "Password must contain at least one digit.";
        }
        if (!newPassword.Any(char.IsPunctuation))
        {
            return "Password must contain at least one special character.";
        }
        if (newPassword != confirmPassword)
        {
            return "Passwords do not match.";
        }
        return string.Empty;
    }

    private void StartCountdown()
    {
        remainingTime = 120; // 2 minutes in seconds
        countdownTimer = new System.Timers.Timer(1000);
        countdownTimer.Elapsed += OnCountdownElapsed;
        countdownTimer.Start();
    }

    private async void OnCountdownElapsed(object sender, System.Timers.ElapsedEventArgs e)
    {
        if (remainingTime > 0)
        {
            remainingTime--;
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            countdownTimer.Stop();
            await Task.Delay(2000); // Wait for 3 seconds
            await InvokeAsync(() => nav.NavigateTo("/ResetPassword", true)); // Refresh the page
        }
    }
}
