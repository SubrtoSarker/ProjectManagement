@page "/Test"
@using ProjectManagement.Models.ProjectModel
@using ProjectManagement.Models.Task
@using ProjectManagement.Services.TaskM
@using System.Text.Json
@attribute [TabItemOption(Text = "Test")]
@inject IJSRuntime JSRuntime
@inject ToastService Tost
@inject ITaskServices task

<PageTitle>Test</PageTitle>
<h3>TestPage</h3>

<!-- Your buttons and modal here -->

<div class="container">
    <div class="row">
        <div class="col-md-2">
        </div>

        <div class="col-md-6">
            <div id="chartdiv" style="width: 100%; height: 500px;"></div>
        </div>
    </div>
</div>


@code {
    public void info() => Tost.Information("This is Title", "This is Content", true);
    public void Success() => Tost.Success("This is Title", "This is Content", true);
    public void warning() => Tost.Warning("This is Title", "This is Content", true);
    public void Danger() => Tost.Error("This is Title", "This is Content", true);

    private ProjectCreate newProject = new ProjectCreate();

    private async void AddNewTask() => await Tost.Success("This is Title", "This is Content", true);

    private List<Performance> Performance = new List<Performance>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ShowDonutChart();
        }
    }

    private async Task ShowDonutChart()
    {
        DateTime fromDate = new DateTime(2024, 1, 1);
        DateTime toDate = DateTime.Today;

        Performance = await task.GetPerFormance(fromDate, toDate, 2, 0);

        var jsonData = JsonSerializer.Serialize(Performance);
        await JSRuntime.InvokeVoidAsync("createDonutChart", jsonData);
    }
}
