@page "/Task"
@attribute [TabItemOption(Text = "Task", Closable = false)]
@using ProjectManagement.Models.ProjectModel
@using ProjectManagement.Models.Task
@using ProjectManagement.Services.Session
@using ProjectManagement.Services.TaskM
@using NetcodeHub.Packages.Components.Validations.OnInput;
@inject Blazored.SessionStorage.ISessionStorageService sess
@inject ITaskServices task
@inject IJSRuntime JSRuntime
@inject ToastService Tost
@inject NavigationManager nav
@implements IDisposable
<PageTitle>Task</PageTitle>

<style>
    .task-button {
        opacity: 0;
        transform: translateY(0);
        box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
        transition: opacity 0.5s ease, transform 0.5s ease, box-shadow 0.5s ease;
    }



    .task-card:hover .task-button {
        opacity: 1;
        transform: translateY(5px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
    }

</style>
<style>
    .task-card {
        max-height: 41px;
        overflow: hidden;
        transition: max-height 1s ease-out, padding 1s ease-out, margin 1s ease-out;
    }

    .task-card:hover {
        max-height: none;
        padding: 10px; /* Adjust the padding to your liking */
        margin-bottom: 10px; /* Adjust the margin to your liking */
    }

    .kanban-column .card-body {
        /* max-height: 700px;
        overflow: hidden;
        transition: max-height 1s ease-out, padding 1s ease-out, margin 1s ease-out; */
        padding: 10px; /* Adjust the padding to your liking */
        margin-bottom: 10px; /* Adjust the margin to your liking */
    }

    .kanban-column:hover .card-body {
        max-height: none;
        padding: 10px; /* Adjust the padding to your liking */
        margin-bottom: 10px; /* Adjust the margin to your liking */
    }
</style>

<div class="row justify-content-center">
    <div class="col-md-8">
        @if (Current == null)
        {
            <div class="card">
                <div class="card-header text-center bg-secondary text-black">
                    <h5>No Current Task</h5>
                </div>
            </div>
        }
        else
        {
            <div class="card">
                <div class="card-header text-center bg-secondary text-black">
                    <h5>In Progress</h5>
                </div>

                <div class="card-body">
                    <!-- Editable Task Name -->
                    <h2 class="text-center">
                        @if (isEditing)
                        {
                            <input class="form-control form-control-sm text-center mx-auto"
                            style="max-width: 400px;"
                            @bind="Current.strTaskName" />
                        }
                        else
                        {
                            @Current.strTaskName
                        }
                    </h2>

                    <!-- Requested By -->
                    <div class="d-flex align-items-center mb-2">
                        <span class="fw-bold text-muted me-2">Requested by:</span>
                        @if (isEditing)
                        {
                            <input class="form-control form-control-sm w-auto" @bind="Current.strRequestFrom" />
                        }
                        else
                        {
                            <span class="text-muted">@Current.strRequestFrom</span>
                        }
                    </div>

                    <!-- Project Name -->
                    <div class="d-flex align-items-center mb-2">
                        <span class="fw-bold text-muted me-2">Project: </span><span class="text-muted">@Current.strProjectName</span>
                    </div>

                    <hr />

                    <!-- Description -->
                    <p class="fw-bold">Description:</p>
                    @if (isEditing)
                    {
                        <textarea class="form-control form-control-sm" rows="3" @bind="Current.strDescription"></textarea>
                    }
                    else
                    {
                        <p>@Current.strDescription</p>
                    }

                    <!-- Due Date & Priority -->
                    <div class="d-flex flex-wrap align-items-center mb-2 mt-3">
                        <span class="fw-bold text-muted me-2">Due Date:</span>
                        @if (isEditing)
                        {
                            <InputDate @bind-Value="Current.dteDeadLine"
                            class="form-control form-control-sm me-3"
                            style="width: auto;"
                            min="@DateOnly.FromDateTime(DateTime.Today).ToString("yyyy-MM-dd")" />
                        }
                        else
                        {
                            <span class="me-3">@Current.dteDeadLine.ToString("dd MMM")</span>
                        }

                        <span class="fw-bold text-muted me-2">Priority:</span>
                        @if (isEditing)
                        {
                            <InputSelect @bind-Value="Current.intPriroty"
                            class="form-select form-select-sm"
                            style="width: auto;">
                                @foreach (TaskPriority priority in Enum.GetValues(typeof(TaskPriority)))
                                {
                                    <option value="@((int)priority)">@priority</option>
                                }
                            </InputSelect>
                        }
                        else
                        {
                            <span class="badge bg-@GetPriorityBadge(Current.intPriroty)">
                                @((TaskPriority)Current.intPriroty)
                            </span>
                        }
                    </div>

                    <hr />

                    <!-- Steps -->
                    <p class="fw-bold">Steps: <span>@(Steps != null ? $"({Steps.Count()})" : "(0)")</span></p>
                    @if (Steps != null && Steps.Any())
                    {
                        <ul class="list-group">
                            @foreach (var step in Steps)
                            {
                                <li class="list-group-item">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <label class="form-check-label flex-grow-1" for="@($"checkbox-{step.intStepId}")">@step.strStep</label>
                                        <div class="form-check form-switch me-3">
                                            <input class="form-check-input"
                                            type="checkbox"
                                            id="@($"checkbox-{step.intStepId}")"
                                            checked="@step.isDone"
                                            @onchange="() => UpdateStepSatatus(step.intStepId, step.isDone)" />
                                            <label class="form-check-label" for="@($"checkbox-{step.intStepId}")">Done</label>
                                        </div>
                                        <button class="btn btn-primary"
                                        @onclick="() => SetStep(step.strStep, step.intStepId)"
                                        data-bs-toggle="modal"
                                        data-bs-target="#EditStep">
                                            <i class="bi bi-pen"></i>
                                        </button>
                                    </div>
                                </li>
                            }
                        </ul>
                    }

                    @if (!showTextbox)
                    {
                        <div class="mt-3">
                            <button class="btn btn-sm btn-outline-primary d-flex align-items-center justify-content-center"
                            style="width: 40px; height: 36px; border-radius: 6px;"
                            title="Add Step"
                            @onclick="ToggleTextbox">
                                <i class="bi bi-plus"></i>
                            </button>
                        </div>
                    }

                    @if (showTextbox)
                    {
                        <div class="mt-3">
                            <EditForm Model="@newProject" OnValidSubmit="CreateStep" class="needs-validation" novalidate>
                                <DataAnnotationsValidator />
                                <div class="row">
                                    <FloatingText id="UserName" type="text" class="form-control" @bind-Value="newProject.Name" Label="Step" />
                                    <ValidationMessage class="text-danger" For="@(() => newProject.Name)" />
                                </div>
                                <button type="submit" class="btn btn-primary">ADD</button>
                                <button class="btn btn-warning" @onclick="CancelStep">Cancel</button>
                            </EditForm>
                        </div>
                    }

                    <hr />

                    <!-- Footer Controls -->
                    <div class="mt-3 d-flex flex-wrap align-items-center justify-content-between gap-3">

                        <!-- Left Buttons -->
                        <div class="d-flex flex-wrap gap-2">
                            <!-- Pause / Resume -->
                            <button class="btn btn-sm btn-outline-secondary d-flex align-items-center justify-content-center"
                            style="width: 40px; height: 36px; border-radius: 6px;"
                            title="@(isPaused ? "Resume" : "Pause")"
                            @onclick="TogglePause">
                                <i class="bi @(isPaused ? "bi-play-fill text-success" : "bi-pause-fill text-warning")"></i>
                            </button>

                            <!-- Transfer -->
                            @if (session.TeamID > 1)
                            {
                                <button class="btn btn-sm btn-outline-primary d-flex align-items-center justify-content-center"
                                data-bs-toggle="modal"
                                data-bs-target="#TranferModal"
                                data-bs-title="@Current.strTaskName"
                                title="Transfer"
                                style="width: 40px; height: 36px; border-radius: 6px;"
                                @onclick="() => TransferCheck(Current.strTaskName, Current.intTaskID)">
                                    <i class="bi bi-arrow-left-right"></i>
                                </button>
                            }

                            <!-- Sync -->
                            <button class="btn btn-sm btn-outline-info d-flex align-items-center justify-content-center"
                            style="width: 40px; height: 36px; border-radius: 6px;"
                            title="Sync"
                            @onclick="Sync">
                                <i class="bi bi-arrow-repeat"></i>
                            </button>

                            <!-- Edit / Save -->
                            <!-- Edit / Save / Cancel Buttons -->
                            @if (isEditing)
                            {
                                <div class="d-flex gap-2">
                                    <!-- Save -->
                                    <button class="btn btn-sm btn-outline-success d-flex align-items-center justify-content-center"
                                    style="width: 40px; height: 36px; border-radius: 6px;"
                                    title="Save"
                                    @onclick="SaveChanges">
                                        <i class="bi bi-check-lg"></i>
                                    </button>

                                    <!-- Cancel -->
                                    <button class="btn btn-sm btn-outline-warning d-flex align-items-center justify-content-center"
                                    style="width: 40px; height: 36px; border-radius: 6px;"
                                    title="Cancel"
                                    @onclick="CancelChanges">
                                        <i class="bi bi-x-lg"></i>
                                    </button>
                                </div>
                            }
                            else
                            {
                                <!-- Edit -->
                                <button class="btn btn-sm btn-outline-primary d-flex align-items-center justify-content-center"
                                style="width: 40px; height: 36px; border-radius: 6px;"
                                title="Edit"
                                @onclick="EnterEditMode">
                                    <i class="bi bi-pencil"></i>
                                </button>
                            }

                        </div>

                        <!-- Right Buttons -->
                        <div class="task-buttons d-flex flex-wrap gap-2">
                            <button class="btn btn-sm btn-outline-primary" title="Move to Queue"
                            style="width: 40px; height: 36px; border-radius: 6px;"
                            @onclick="() => TaskAction(0, Current.intTaskID, 0, 2, elapsedTime)">
                                <i class="bi bi-journal-text"></i>
                            </button>

                            <button class="btn btn-sm btn-outline-warning" title="Awaiting Action"
                            style="width: 40px; height: 36px; border-radius: 6px;"
                            @onclick="() => TaskAction(0, Current.intTaskID, 0, 3, elapsedTime)">
                                <i class="bi bi-pause-fill"></i>
                            </button>

                            <button class="btn btn-sm btn-outline-info" title="Evaluation"
                            style="width: 40px; height: 36px; border-radius: 6px;"
                            data-bs-dismiss="modal"
                            @onclick="() => TaskAction(0, Current.intTaskID, 0, 4, elapsedTime)">
                                <i class="bi bi-eye"></i>
                            </button>

                            <button class="btn btn-sm btn-outline-success" title="Complete"
                            style="width: 40px; height: 36px; border-radius: 6px;"
                            data-bs-dismiss="modal"
                            @onclick="() => TaskAction(0, Current.intTaskID, 0, 5, elapsedTime)">
                                <i class="bi bi-check2"></i>
                            </button>

                            <button class="btn btn-sm btn-outline-danger" title="Delete"
                            style="width: 40px; height: 36px; border-radius: 6px;"
                            data-bs-dismiss="modal"
                            @onclick="() => TaskAction(0, Current.intTaskID, 0, 6, elapsedTime)">
                                <i class="bi bi-x-circle"></i>
                            </button>
                        </div>
                    </div>

                </div>

                <!-- Card Footer with Session Info -->
                <div class="card-footer d-flex justify-content-between">
                    <div>
                        <p class="fw-bold mb-0">Previous Session: @PreviouSession.ToString(@"hh\:mm\:ss")</p>
                    </div>
                    <div>
                        <p class="fw-bold mb-0">Current Working Time: @elapsedTime.ToString(@"hh\:mm\:ss")</p>
                    </div>
                </div>
            </div>

        }

    </div>
</div>
<br />
<br />
<div class="container">
    <div class="row">
        <div class="col-md-3">
            <div class="card kanban-column">
                <div class="card-header bg-primary text-white text-center">
                    <h3>Queue <span>@(ToDo != null ? $"({ToDo.Count()})" : "(0)")</span></h3>
                </div>
                <div class="card-body">
                    @if (ToDo != null && ToDo.Any())
                    {
                        @foreach (var task in ToDo)
                        {
                            var today = DateOnly.FromDateTime(DateTime.Today);
                            bool isPastDeadline = task.dteDeadLine < today;
                            bool isNearDeadline = task.dteDeadLine >= today && task.dteDeadLine <= today.AddDays(7);

                            string priorityText = ((TaskPriority)task.intPriroty).ToString();
                            string priorityIcon = task.intPriroty switch
                            {
                                4 => "🔥", // Critical
                                3 => "⚠️", // High
                                2 => "🔶", // Medium
                                1 => "✅", // Low
                                _ => ""
                            };

                            <div class="card task-card mb-3">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-start">
                                        <div>
                                            <h5 class="card-title mb-1">@task.strTaskName</h5>
                                            <p class="card-text mb-1">@task.strDescription</p>
                                            <p class="card-text text-muted mb-2">@task.strProjectName</p>
                                            <div class="text-muted">
                                                <small>
                                                    <strong>@task.strRequestFrom</strong> |
                                                    ⏱ @task.tmWorking.ToString("hh\\:mm")
                                                </small>
                                            </div>
                                        </div>

                                        <div class="text-end">
                                            @if (isPastDeadline)
                                            {
                                                <span class="badge" style="background-color:#dc3545; color:white;">❗ Overdue</span>
                                            }
                                            else if (isNearDeadline)
                                            {
                                                <span class="badge" style="background-color:#ffc107; color:black;">⏰ Due Soon</span>
                                            }

                                            <span class="badge" style="background-color:#6c757d; color:white;">
                                                @priorityIcon @priorityText
                                            </span>
                                        </div>
                                    </div>

                                    <div class="task-buttons mt-3 d-flex gap-2">
                                        <button type="button"
                                        @onclick="() => Start(task.intTaskID)"
                                        class="btn btn-sm btn-outline-success d-flex justify-content-center align-items-center"
                                        title="Start"
                                        style="width: 36px; height: 36px; border-radius: 6px;">
                                            <i class="bi bi-play-fill"></i>
                                        </button>

                                        <button type="button"
                                        @onclick="() => Change(task.intTaskID, 3)"
                                        class="btn btn-sm btn-outline-warning d-flex justify-content-center align-items-center"
                                        title="Awaiting Action"
                                        style="width: 36px; height: 36px; border-radius: 6px;">
                                            <i class="bi bi-pause-fill"></i>
                                        </button>
                                    </div>

                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <p>No tasks in this category.</p>
                    }
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card kanban-column">
                <div class="card-header bg-warning text-white text-center">
                    <h3>Awaiting Action <span>@(OnHold != null ? $"({OnHold.Count()})" : "(0)")</span></h3>
                </div>
                <div class="card-body">
                    @if (OnHold != null && OnHold.Any())
                    {
                        @foreach (var task in OnHold)
                        {
                            var today = DateOnly.FromDateTime(DateTime.Today);
                            bool isPastDeadline = task.dteDeadLine < today;
                            bool isNearDeadline = task.dteDeadLine >= today && task.dteDeadLine <= today.AddDays(7);

                            string priorityText = ((TaskPriority)task.intPriroty).ToString();
                            string priorityIcon = task.intPriroty switch
                            {
                                4 => "🔥", // Critical
                                3 => "⚠️", // High
                                2 => "🔶", // Medium
                                1 => "✅", // Low
                                _ => ""
                            };

                            <div class="card task-card mb-3">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-start">
                                        <div>
                                            <h5 class="card-title mb-1">@task.strTaskName</h5>
                                            <p class="card-text mb-1">@task.strDescription</p>
                                            <p class="card-text text-muted mb-2">@task.strProjectName</p>
                                            <div class="text-muted">
                                                <small>
                                                    <strong>@task.strRequestFrom</strong> |
                                                    ⏱ @task.tmWorking.ToString("hh\\:mm")
                                                </small>
                                            </div>
                                        </div>

                                        <div class="text-end">
                                            @if (isPastDeadline)
                                            {
                                                <span class="badge" style="background-color:#dc3545; color:white;">❗ Overdue</span>
                                            }
                                            else if (isNearDeadline)
                                            {
                                                <span class="badge" style="background-color:#ffc107; color:black;">⏰ Due Soon</span>
                                            }

                                            <span class="badge" style="background-color:#6c757d; color:white;">
                                                @priorityIcon @priorityText
                                            </span>
                                        </div>
                                    </div>
                                    <div class="task-buttons mt-3 d-flex gap-2">
                                        <button type="button"
                                        @onclick="() => Start(task.intTaskID)"
                                        class="btn btn-sm btn-outline-success d-flex justify-content-center align-items-center"
                                        title="Start"
                                        style="width: 36px; height: 36px; border-radius: 6px;">
                                            <i class="bi bi-play-fill"></i>
                                        </button>
                                        <button type="button"
                                        @onclick="() => Change(task.intTaskID, 2)"
                                        class="btn btn-sm btn-outline-primary d-flex justify-content-center align-items-center"
                                        title="Move to Queue"
                                        style="width: 36px; height: 36px; border-radius: 6px;">
                                            <i class="bi bi-journal-text"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }

                    }
                    else
                    {
                        <p>No tasks in this category.</p>
                    }
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card kanban-column">
                <div class="card-header bg-info text-white text-center">
                    <h3>Evaluation <span>@(InReview != null ? $"({InReview.Count()})" : "(0)")</span></h3>
                </div>
                <div class="card-body">
                    @if (InReview != null && InReview.Any())
                    {
                        @foreach (var task in InReview)
                        {
                            var today = DateOnly.FromDateTime(DateTime.Today);
                            bool isPastDeadline = task.dteDeadLine < today;
                            bool isNearDeadline = task.dteDeadLine >= today && task.dteDeadLine <= today.AddDays(7);

                            string priorityText = ((TaskPriority)task.intPriroty).ToString();
                            string priorityIcon = task.intPriroty switch
                            {
                                4 => "🔥", // Critical
                                3 => "⚠️", // High
                                2 => "🔶", // Medium
                                1 => "✅", // Low
                                _ => ""
                            };

                            <div class="card task-card mb-3">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-start">
                                        <div>
                                            <h5 class="card-title mb-1">@task.strTaskName</h5>
                                            <p class="card-text mb-1">@task.strDescription</p>
                                            <p class="card-text text-muted mb-2">@task.strProjectName</p>
                                            <div class="text-muted">
                                                <small>
                                                    <strong>@task.strRequestFrom</strong> |
                                                    ⏱ @task.tmWorking.ToString("hh\\:mm")
                                                </small>
                                            </div>
                                        </div>

                                        <div class="text-end">
                                            @if (isPastDeadline)
                                            {
                                                <span class="badge" style="background-color:#dc3545; color:white;">❗ Overdue</span>
                                            }
                                            else if (isNearDeadline)
                                            {
                                                <span class="badge" style="background-color:#ffc107; color:black;">⏰ Due Soon</span>
                                            }

                                            <span class="badge" style="background-color:#6c757d; color:white;">
                                                @priorityIcon @priorityText
                                            </span>
                                        </div>
                                    </div>

                                    <div class="task-buttons mt-3 d-flex gap-2">
                                        <button type="button"
                                        @onclick="() => Start(task.intTaskID)"
                                        class="btn btn-sm btn-outline-success d-flex justify-content-center align-items-center"
                                        title="Start"
                                        style="width: 36px; height: 36px; border-radius: 6px;">
                                            <i class="bi bi-play-fill"></i>
                                        </button>
                                        <button type="button"
                                        @onclick="() => Change(task.intTaskID, 5)"
                                        class="btn btn-sm btn-outline-success d-flex justify-content-center align-items-center"
                                        title="Complete"
                                        style="width: 36px; height: 36px; border-radius: 6px;">
                                            <i class="bi bi-check2-circle"></i>
                                        </button>

                                    </div>
                                </div>
                            </div>
                        }

                    }
                    else
                    {
                        <p>No tasks in this category.</p>
                    }
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card kanban-column">
                <div class="card-header bg-success text-white text-center">
                    <h3>Complete <span>@(Compete != null ? $"({Compete.Count()})" : "(0)")</span></h3>
                </div>
                <div class="card-body">
                    @if (Compete != null && Compete.Any())
                    {
                        @foreach (var task in Compete.Take(10))
                        {
                            <div class="card task-card mb-3">
                                <div class="card-body">
                                    <h5 class="card-title">@task.strTaskName</h5>
                                    <p class="card-text">@task.strDescription</p>
                                    <p class="card-text">@task.strProjectName</p>
                                    <div class="text-muted mt-2">
                                        <small>
                                            @task.strRequestFrom | @task.tmWorking.ToString("hh\\:mm")
                                        </small>
                                    </div>
                                    @* <div class="task-buttons">
                            <button type="button" class="btn btn-secondary task-button" title="Start">
                            Start
                            </button>
                            <button type="button" class="btn btn-warning task-button" title="On Hold">
                            On Hold
                            </button>
                            </div> *@
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <p>No tasks in this category.</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade fade-in-modal" id="EditStep" tabindex="-1" role="dialog" aria-labelledby="actionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title text-center">Edit Step</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="@newProject" OnValidSubmit="EditStep" class="needs-validation" novalidate>
                    <DataAnnotationsValidator />
                    <div class="row">
                        <FloatingText id="UserName" type="text" class="form-control" @bind-Value="newProject.Name" Label="Name" />
                        <ValidationMessage class="text-danger" For="@(() => newProject.Name)" />
                    </div>
                    <button type="submit" data-bs-dismiss="modal" class="btn btn-primary">Update</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>
<div class="modal fade fade-in-modal" id="actionModal" tabindex="-1" role="dialog" aria-labelledby="actionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title text-center" id="actionModalLabel">Task Actions</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="btn-group d-flex" role="group">
                    <button class="btn btn-primary flex-fill" data-bs-dismiss="modal" @onclick="() => TaskAction(0 , Current.intTaskID, 0, 2, elapsedTime)">
                        <i class="bi bi-list-task me-2"></i> TO DO
                    </button>
                    <button class="btn btn-warning flex-fill" data-bs-dismiss="modal" @onclick="() => TaskAction(0 , Current.intTaskID, 0, 3, elapsedTime)">
                        <i class="bi bi-pause me-2"></i> On Hold
                    </button>
                </div>
                <div class="btn-group d-flex mt-2" role="group">
                    <button class="btn btn-info flex-fill" data-bs-dismiss="modal" @onclick="() => TaskAction(0 , Current.intTaskID, 0, 4, elapsedTime)">
                        <i class="bi bi-eye me-2"></i> Review
                    </button>
                    <button class="btn btn-success flex-fill" data-bs-dismiss="modal" @onclick="() => TaskAction(0 , Current.intTaskID, 0, 5, elapsedTime)">
                        <i class="bi bi-check2 me-2"></i> Complete
                    </button>
                    <button class="btn btn-danger flex-fill" data-bs-dismiss="modal" @onclick="() => TaskAction(0 , Current.intTaskID, 0, 6, elapsedTime)">
                        <i class="bi bi-x-circle me-2"></i> Delete
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade fade-in-modal" id="TranferModal" tabindex="-1" role="dialog" aria-labelledby="TranferModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title text-center" id="TranferModalLabel">@TaskName</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="btn-group d-flex" role="group">
                    @if (TransferUser != null && TransferUser.Any())
                    {
                        <div class="col-md-12">
                            <label class="form-label">Transfer To :</label>
                            <InputSelect id="department" class="form-control" @bind-Value="Select">
                                @foreach (var user in TransferUser)
                                {
                                    <option value="@user.intUserID">@user.strUserName</option>
                                }
                            </InputSelect>
                            <button type="button" data-bs-dismiss="modal" class="btn btn-primary mt-2" @onclick="()=>Transfer(elapsedTime)">Transfer</button>

                        </div>
                    }
                    else
                    {
                        <p>No Team Member to transfer this task</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
@code
{
    public SessionServices session = new SessionServices();
    public Tasks Current;
    public List<Tasks> ToDo;
    public List<Tasks> OnHold;
    public List<Tasks> InReview;
    public List<Tasks> Compete;
    public List<TransferUser> TransferUser;
    private string ButtonStyle => isPaused ? "background-color: green; color: white;" : "background-color: yellow; color: black;";
    TimeSpan PreviouSession;
    private TimeSpan elapsedTime;
    private DateTime startTime;
    private bool isPaused = true;
    private System.Timers.Timer? timer;
    private List<Steps> Steps;
    bool showTextbox = false;
    private ProjectCreate newProject = new ProjectCreate();
    public int stepId;
    public string TaskName;
    public int Select ;
    public async Task Start(int TaskID)
    {
        if (Current != null)
        {
            await Tost.Warning("Warning", "Please finish the current task at hand!!!", true);
        }
        else
        {
            TimeSpan t1 = TimeSpan.Parse("00:00");
            StopAndResetTimer();
            StartTimer();
            await TaskAction(0, TaskID, 0, 1, t1);
        }
    }
    public async Task TransferCheck(string Task, int TaskID)
    {
        TaskName = "Transfer "+Task;
        TransferUser = await task.TransferCheck(TaskID, session.UserID);
        if (TransferUser != null && TransferUser.Any())
        {
            Select = TransferUser.First().intUserID;
        }
    }
    public async Task Transfer(TimeSpan time)
    {
        StopAndResetTimer();
        await TaskAction(1, Current.intTaskID, Select, 2, time);
    }
    public async Task Change(int TaskID, int StatusID)
    {
        TimeSpan t1 = TimeSpan.Parse("00:00");
        await TaskAction(0, TaskID, 0, StatusID, t1);
    }
    public async Task TaskAction(int Type, int TaskID, int User, int Status, TimeSpan time)
    {
        bool confirmed = true;
        if (Status == 6)
        {
            confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this task?");
        }
        else if (Status == 5)
        {
            confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to complete  this task?");
        }
        if (confirmed)
        {
            string output = await task.TaskManage(Type, TaskID, User, Status, time, session.UserID);
            if (output.Contains("Success"))
            {
                await Tost.Success("Success", output, true);
            }
            else
            {
                await Tost.Error("Error", output, true);
            }
            load();
        }
    }
    public void ToggleTextbox()
    {
        showTextbox = !showTextbox;
        newProject = new ProjectCreate();
    }
    private async void SetStep(string Step, int StepID)
    {
        newProject.Name = Step;
        stepId = StepID;
        StateHasChanged();
    }
    public async Task EditStep()
    {
        string output = await task.StepManage(1, newProject.Name, false, stepId, session.UserID);
        if (output.Contains("Success"))
        {
            await Tost.Success("Success", output, true);
        }
        else
        {
            await Tost.Error("Error", output, true);
        }
        showTextbox = false;
        newProject = new ProjectCreate();
        Steps = await task.GetStepsByTask(Current.intTaskID);
        StateHasChanged();
    }
    public async Task CreateStep()
    {
        string output = await task.StepManage(2, newProject.Name, false, Current.intTaskID, session.UserID);
        if (output.Contains("Success"))
        {
            await Tost.Success("Success", output, true);
        }
        else
        {
            await Tost.Error("Error", output, true);
        }
        showTextbox = false;
        newProject = new ProjectCreate();
        Steps = await task.GetStepsByTask(Current.intTaskID);
        StateHasChanged();
    }
    public void CancelStep()
    {
        showTextbox = false;
        newProject = new ProjectCreate();
    }
    public async Task UpdateStepSatatus(int stepID, bool status)
    {
        string output = await task.StepManage(0, "a", !status, stepID, session.UserID);
        if (output.Contains("Success"))
        {
            await Tost.Success("Success", output, true);
        }
        else
        {
            await Tost.Error("Error", output, true);
        }
        Steps = await task.GetStepsByTask(Current.intTaskID);
        StateHasChanged();
    }
    public async void load()
    {
        Current = await task.GetCurrentTasks(session.UserID);
        ToDo = await task.GetTasks(session.UserID, 2);
        OnHold = await task.GetTasks(session.UserID, 3);
        InReview = await task.GetTasks(session.UserID, 4);
        Compete = await task.GetTasks(session.UserID, 5);
        if (Current!=null)
        {
            PreviouSession = Current.tmWorking;
            isPaused = false;
            Steps = await task.GetStepsByTask(Current.intTaskID);
        }
        StateHasChanged();
    }
    protected void StartTimer()
    {
        StopAndResetTimer(); // Ensure previous timer is stopped
        startTime = DateTime.Now;
        timer = new System.Timers.Timer(1000);
        timer.Elapsed += async (sender, e) => await InvokeAsync(UpdateElapsedTime);
        timer.Start();
    }

    private void TogglePause()
    {
        isPaused = !isPaused;

        if (isPaused)
        {
            // Pause the timer
            timer.Stop();
        }
        else
        {
            // Resume the timer
            startTime = DateTime.Now - elapsedTime; // Adjust start time to maintain elapsed time
            timer.Start();
        }

        StateHasChanged(); // Notify Blazor to update the UI
    }
    private DateTime lastUIUpdate = DateTime.MinValue;
    private void UpdateElapsedTime()
    {
        if (!isPaused)
        {
            elapsedTime = DateTime.Now - startTime;

            // Call Sync if elapsed time exceeds 5 minutes
            if (elapsedTime.TotalMinutes > 5)
            {
                Sync();
            }

            // Debounce UI updates to once per second
            if ((DateTime.Now - lastUIUpdate).TotalSeconds > 1)
            {
                lastUIUpdate = DateTime.Now;
                InvokeAsync(StateHasChanged); // Ensure UI updates on the Blazor UI thread
            }
        }
    }
    private string GetPriorityBadge(int priority)
    {
        return priority switch
        {
            4 => "danger",   // Critical (red)
            3 => "warning",  // High (orange/yellow)
            2 => "info",     // Medium (blue)
            1 => "success",  // Low (green)
            _ => "secondary" // Default (gray)
        };
    }
    private readonly SemaphoreSlim syncLock = new SemaphoreSlim(1, 1);

    private async void Sync()
    {
        try
        {
            await syncLock.WaitAsync(); // Acquire the lock asynchronously
            if (Current != null) // Check if Current is not null
            {
                TimeSpan ET = elapsedTime;
                StopAndResetTimer();
                StartTimer();
                await TaskAction(0, Current.intTaskID, 0, 1, ET);
            }
            else
            {
                System.Console.WriteLine("Current task is null during sync.");
            }
        }
        catch (Exception ex)
        {
            System.Console.WriteLine($"Error in Sync: {ex.Message}");
            nav.NavigateTo("/");
        }
        finally
        {
            syncLock.Release(); // Release the lock
        }
    }

    private void StopAndResetTimer()
    {
        if (timer != null)
        {
            timer.Stop();
        }
        elapsedTime = TimeSpan.Zero;
        startTime = DateTime.Now;
    }
    protected override async Task OnInitializedAsync()
    {
        session = await sess.GetItemAsync<SessionServices>("session");
        load();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            load();
            StartTimer();
        }
    }
    public void Dispose()
    {
        timer?.Dispose();
    }
    private bool isEditing = false;
    private void EnterEditMode()
    {
        isEditing = true;
    }

    private async Task SaveChanges()
    {
        string output = await task.TaskUpdate(Current, session.UserID);
        if (output.Contains("Success"))
        {
            await Tost.Success("Success", output, true);
        }
        else
        {
            await Tost.Error("Error", output, true);
        }
        Current = await task.GetCurrentTasks(session.UserID);
        isEditing = false;
    }

    private async void CancelChanges()
    {
        Current = await task.GetCurrentTasks(session.UserID);
        isEditing = false;
    }
}
